service:
  name: authentication

plugins:
  - serverless-domain-manager

custom:
  publicUserPoolClientMap:
    default: ${ssm:/nevvi/cognito/nevvi-development-public-users/clients/authentication/id}
    production: ${ssm:/nevvi/cognito/nevvi-public-users/clients/authentication/id}
  domainNameMap:
    default: api.development.nevvi.net
    production: api.nevvi.net
  basePathMap:
    production: authentication
    development: authentication
    default: ${self:provider.stage}-authentication
  customDomain:
    domainName: ${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}
    basePath: ${self:custom.basePathMap.${self:provider.stage}, self:custom.basePathMap.default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: authentication-${self:provider.stage}
  stackName: authentication-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    PUBLIC_USER_POOL_CLIENT_ID: ${self:custom.publicUserPoolClientMap.${self:provider.stage}, self:custom.publicUserPoolClientMap.default}

functions:
  register:
    handler: src/functions/AuthHandler.register
    events:
      - http:
          path: /v1/register
          method: post
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - AccessToken
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent

  login:
    handler: src/functions/AuthHandler.login
    events:
      - http:
          path: /v1/login
          method: post
          origin: '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - AccessToken
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent

  logout:
    handler: src/functions/AuthHandler.logout
    events:
      - http:
          path: /v1/logout
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - AccessToken
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  # Cognito Triggers
  preSignUpTrigger:
    handler: src/functions/CognitoTriggers.preSignUp

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'